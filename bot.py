import logging
import os
import random
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import (
    ApplicationBuilder,
    CommandHandler,
    MessageHandler,
    CallbackQueryHandler,
    ContextTypes,
    filters,
)
from openai import OpenAI

# üîê –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
BOT_TOKEN = os.getenv("BOT_TOKEN")
OPENAI_API_KEY = os.getenv("OPENAI_API_KEY")
WHATSAPP_LINK = os.getenv("WHATSAPP_LINK")

if not all([BOT_TOKEN, OPENAI_API_KEY, WHATSAPP_LINK]):
    raise RuntimeError("‚ùå BOT_TOKEN / OPENAI_API_KEY / WHATSAPP_LINK –Ω–µ –∑–∞–¥–∞–Ω—ã.")

# ü§ñ OpenAI
client = OpenAI(api_key=OPENAI_API_KEY)

# ü™µ –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# üëã –ö–æ–º–∞–Ω–¥–∞ /start
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    keyboard = [
        [InlineKeyboardButton("üß† –ó–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å –±–æ—Ç—É", callback_data="bot_chat")],
        [InlineKeyboardButton("üë©‚Äç‚öïÔ∏è –•–æ—á—É –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—é —Å –≤—Ä–∞—á–æ–º", callback_data="whatsapp")],
        [InlineKeyboardButton("üìö –°—Ç–∞—Ç—å–∏ –æ –∫–æ–∂–µ", callback_data="articles")],
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    welcome_text = (
        "–ü—Ä–∏–≤–µ—Ç! –Ø skin-–±–æ—Ç üíÜ‚Äç‚ôÄÔ∏è\n"
        "–ü–æ–º–æ–≥–∞—é —Å —É—Ö–æ–¥–æ–º –∑–∞ –∫–æ–∂–µ–π –∏ –ø–æ–¥—Å–∫–∞–∑—ã–≤–∞—é, –∫–∞–∫ —É–ª—É—á—à–∏—Ç—å –µ—ë —Å–æ—Å—Ç–æ—è–Ω–∏–µ.\n\n"
        "üìå –ö–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è –æ–∑–Ω–∞–∫–æ–º–∏—Ç–µ–ª—å–Ω–∞—è –∏ –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –ª–µ—á–µ–Ω–∏–µ–º."
    )
    try:
        await update.message.reply_text(welcome_text, reply_markup=reply_markup)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ /start: {e}")

# üîò –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–æ–∫
async def button_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    try:
        if query.data == "bot_chat":
            await query.edit_message_text("–ù–∞–ø–∏—à–∏—Ç–µ –≤–∞—à –≤–æ–ø—Ä–æ—Å –ø–æ —É—Ö–æ–¥—É –∑–∞ –∫–æ–∂–µ–π. –Ø –ø–æ—Å—Ç–∞—Ä–∞—é—Å—å –ø–æ–º–æ—á—å üß¥")
            context.user_data["chat_mode"] = True

        elif query.data == "whatsapp":
            keyboard = [[InlineKeyboardButton("–ü–µ—Ä–µ–π—Ç–∏ –≤ WhatsApp", url=WHATSAPP_LINK)]]
            reply_markup = InlineKeyboardMarkup(keyboard)
            await query.edit_message_text(
                "üë©‚Äç‚öïÔ∏è –ù–∞—à –≤—Ä–∞—á –≥–æ—Ç–æ–≤ –ø—Ä–æ–∫–æ–Ω—Å—É–ª—å—Ç–∏—Ä–æ–≤–∞—Ç—å –≤–∞—Å –ª–∏—á–Ω–æ!\n"
                "–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ –∏ –Ω–∞–ø–∏—à–∏—Ç–µ –≤ WhatsApp:",
                reply_markup=reply_markup
            )
            context.user_data["chat_mode"] = False

        elif query.data == "articles":
            await query.edit_message_text("üìö –ò—â—É –∏–Ω—Ç–µ—Ä–µ—Å–Ω—É—é —Å—Ç–∞—Ç—å—é –ø–æ —É—Ö–æ–¥—É –∑–∞ –∫–æ–∂–µ–π...")
            article = await generate_article()
            await query.message.reply_text(article)
            context.user_data["chat_mode"] = True

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–Ω–æ–ø–∫–∏: {e}")

# üí¨ –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π
async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not context.user_data.get("chat_mode"):
        return

    user = update.effective_user
    user_msg = update.message.text

    # üîÅ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Ö–æ—á–µ—Ç –≤–µ—Ä–Ω—É—Ç—å—Å—è –∫ –±–æ—Ç—É
    BACK_TO_CHAT_KEYWORDS = ["–∑–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å", "–ø–µ—Ä–µ–¥—É–º–∞–ª", "–≤–µ—Ä–Ω—É—Ç—å—Å—è", "—Å–ø—Ä–æ—Å–∏—Ç—å", "—á–∞—Ç"]
    if any(word in user_msg.lower() for word in BACK_TO_CHAT_KEYWORDS):
        context.user_data["chat_mode"] = True
        await update.message.reply_text("–•–æ—Ä–æ—à–æ! –ù–∞–ø–∏—à–∏—Ç–µ —Å–≤–æ–π –≤–æ–ø—Ä–æ—Å, —è —Å —Ä–∞–¥–æ—Å—Ç—å—é –ø–æ–º–æ–≥—É üß¥")
        return

    logger.info(f"[{user.id} | @{user.username}] ‚ûú {user_msg}")

    # üö® –ö–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞ –ø—Ä–æ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—é
    CONSULTATION_KEYWORDS = ["–∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü", "–≤—Ä–∞—á", "–∑–∞–ø–∏—Å", "–ø—Ä–∏—ë–º", "–ø—Ä–∏–µ–º"]
    if any(word in user_msg.lower() for word in CONSULTATION_KEYWORDS):
        try:
            reply = (
                "–ß—Ç–æ–±—ã –∑–∞–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—é, –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É üëá –∏ –Ω–∞–ø–∏—à–∏—Ç–µ –Ω–∞–º –≤ WhatsApp.\n\n"
                "üë©‚Äç‚öïÔ∏è –ú—ã —Å —Ä–∞–¥–æ—Å—Ç—å—é –≤–∞–º –ø–æ–º–æ–∂–µ–º –ª–∏—á–Ω–æ!"
            )
            keyboard = [[InlineKeyboardButton("–ü–µ—Ä–µ–π—Ç–∏ –≤ WhatsApp", url=WHATSAPP_LINK)]]
            reply_markup = InlineKeyboardMarkup(keyboard)
            await update.message.reply_text(reply, reply_markup=reply_markup)
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –æ—Ç–≤–µ—Ç–∞ –Ω–∞ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—é: {e}")
        return

    # üí° GPT-–æ—Ç–≤–µ—Ç
    prompt = (
        "–¢—ã ‚Äî –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–π –∫–æ—Å–º–µ—Ç–æ–ª–æ–≥. –û—Ç–≤–µ—á–∞–π —Ç–æ–ª—å–∫–æ –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã –ø–æ —É—Ö–æ–¥—É –∑–∞ –∫–æ–∂–µ–π. "
        "–ï—Å–ª–∏ –≤–æ–ø—Ä–æ—Å –Ω–µ –ø–æ —Ç–µ–º–µ ‚Äî —Å–∫–∞–∂–∏, —á—Ç–æ —Ç—ã –º–æ–∂–µ—à—å –≥–æ–≤–æ—Ä–∏—Ç—å —Ç–æ–ª—å–∫–æ –æ –∫–æ—Å–º–µ—Ç–æ–ª–æ–≥–∏–∏.\n"
        f"–í–æ–ø—Ä–æ—Å: {user_msg}"
    )

    try:
        response = client.chat.completions.create(
            model="gpt-4-1106-preview",
            messages=[{"role": "user", "content": prompt}],
            max_tokens=300,
            temperature=0.7,
        )
        reply = response.choices[0].message.content.strip() if response.choices else "–û—Ç–≤–µ—Ç –æ—Ç GPT –Ω–µ –ø–æ–ª—É—á–µ–Ω."
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ OpenAI: {e}")
        reply = "–£–ø—Å, —á—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."

    try:
        await update.message.reply_text(reply)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")

# ‚úÖ /done
async def done(update: Update, context: ContextTypes.DEFAULT_TYPE):
    try:
        await update.message.reply_text("–°–ø–∞—Å–∏–±–æ, —á—Ç–æ –æ–±—Ä–∞—Ç–∏–ª–∏—Å—å! –ë—É–¥—å—Ç–µ –∫—Ä–∞—Å–∏–≤—ã –∏ –∑–¥–æ—Ä–æ–≤—ã üíñ")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ /done: {e}")

# üß† –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Å—Ç–∞—Ç—å–∏
ARTICLE_TOPICS = [
    "–µ–∂–µ–¥–Ω–µ–≤–Ω—ã–π —É—Ö–æ–¥ –∑–∞ –∫–æ–∂–µ–π –ª–∏—Ü–∞",
    "–æ—á–∏—â–µ–Ω–∏–µ –∏ —É–≤–ª–∞–∂–Ω–µ–Ω–∏–µ",
    "—É—Ö–æ–¥ –∑–∞ –∂–∏—Ä–Ω–æ–π –∫–æ–∂–µ–π",
    "—É—Ö–æ–¥ –∑–∞ —Å—É—Ö–æ–π –∏ —á—É–≤—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ–π –∫–æ–∂–µ–π",
    "–∞–Ω—Ç–∏–≤–æ–∑—Ä–∞—Å—Ç–Ω–æ–π —É—Ö–æ–¥",
    "—Å—ã–≤–æ—Ä–æ—Ç–∫–∏ –∏ –∞–∫—Ç–∏–≤–Ω—ã–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã",
    "—ç–∫—Å—Ñ–æ–ª–∏–∞—Ü–∏—è –∏ –º–∞—Å–∫–∏",
    "–ø—Ä–æ—Ñ–∏–ª–∞–∫—Ç–∏–∫–∞ –∞–∫–Ω–µ",
    "–∫–∞–∫ –≤—ã–±—Ä–∞—Ç—å –∫—Ä–µ–º –ø–æ —Ç–∏–ø—É –∫–æ–∂–∏"
]

async def generate_article():
    topic = random.choice(ARTICLE_TOPICS)

    prompt = (
    f"–ù–∞–π–¥–∏ —Å—Ç–∞—Ç—å—é –ø–æ —Ç–µ–º–µ ¬´{topic}¬ª (—Ç–æ–ª—å–∫–æ –ø–æ —É—Ö–æ–¥—É –∑–∞ –∫–æ–∂–µ–π). "
    f"–°–æ–∫—Ä–∞—Ç–∏ –µ—ë –¥–æ 3‚Äì5 –∞–±–∑–∞—Ü–µ–≤. –ò–∑–ª–æ–∂–∏ –Ω–µ–π—Ç—Ä–∞–ª—å–Ω—ã–º, –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–º —è–∑—ã–∫–æ–º –±–µ–∑ –æ–±—Ä–∞—â–µ–Ω–∏—è –∫ —á–∏—Ç–∞—Ç–µ–ª—é. "
    f"–ò–∑–º–µ–Ω–∏ —Ñ–æ—Ä–º—É–ª–∏—Ä–æ–≤–∫–∏, –Ω–æ –Ω–µ –¥–æ–±–∞–≤–ª—è–π –Ω–æ–≤—ã—Ö —Ñ–∞–∫—Ç–æ–≤. "
    f"–í –∫–æ–Ω—Ü–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –¥–æ–±–∞–≤—å —Ñ—Ä–∞–∑—É: "
    f"¬´–î–ª—è –Ω–∞–∏–ª—É—á—à–µ–≥–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ —Ä–µ–∫–æ–º–µ–Ω–¥—É—é –∑–∞–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –æ–Ω–ª–∞–π–Ω-–∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—é –∫ –î–æ–∫—Ç–æ—Ä—É –û–∫—Å–∞–Ω–µ.¬ª"
)


    try:
        response = client.chat.completions.create(
            model="gpt-4-1106-preview",
            messages=[{"role": "user", "content": prompt}],
            max_tokens=900,
            temperature=0.85,
        )
        return response.choices[0].message.content.strip()
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Å—Ç–∞—Ç—å–∏: {e}")
        return "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç—å—é üòî –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."

# üöÄ –°—Ç–∞—Ä—Ç
def main():
    app = ApplicationBuilder().token(BOT_TOKEN).build()
    app.add_handler(CommandHandler("start", start))
    app.add_handler(CommandHandler("done", done))
    app.add_handler(CallbackQueryHandler(button_handler))
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message))
    app.run_polling()

if __name__ == "__main__":
    main()
