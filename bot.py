import logging
import os
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import (
    ApplicationBuilder,
    CommandHandler,
    MessageHandler,
    CallbackQueryHandler,
    ContextTypes,
    filters,
)
from openai import OpenAI

# –ü–æ–ª—É—á–µ–Ω–∏–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è –∏–∑ Railway
BOT_TOKEN = os.getenv("BOT_TOKEN")
OPENAI_API_KEY = os.getenv("OPENAI_API_KEY")
WHATSAPP_LINK = os.getenv("WHATSAPP_LINK")

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö (–Ω–∞ –≤—Å—è–∫–∏–π —Å–ª—É—á–∞–π)
if not BOT_TOKEN or not OPENAI_API_KEY or not WHATSAPP_LINK:
    raise EnvironmentError("–û–¥–Ω–∞ –∏–ª–∏ –Ω–µ—Å–∫–æ–ª—å–∫–æ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã.")

client = OpenAI(api_key=OPENAI_API_KEY)

# –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# –ö–æ–º–∞–Ω–¥–∞ /start
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    keyboard = [
        [InlineKeyboardButton("üß† –ó–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å –±–æ—Ç—É", callback_data="bot_chat")],
        [InlineKeyboardButton("üë©‚Äç‚öïÔ∏è –•–æ—á—É –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—é —Å –≤—Ä–∞—á–æ–º", callback_data="whatsapp")],
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    welcome_text = (
        "–ü—Ä–∏–≤–µ—Ç! –Ø skin-–±–æ—Ç üíÜ‚Äç‚ôÄÔ∏è\n"
        "–ü–æ–º–æ–≥–∞—é —Å —É—Ö–æ–¥–æ–º –∑–∞ –∫–æ–∂–µ–π –∏ –ø–æ–¥—Å–∫–∞–∑—ã–≤–∞—é, –∫–∞–∫ —É–ª—É—á—à–∏—Ç—å –µ—ë —Å–æ—Å—Ç–æ—è–Ω–∏–µ.\n\n"
        "üìå –ö–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è –æ–∑–Ω–∞–∫–æ–º–∏—Ç–µ–ª—å–Ω–∞—è –∏ –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –ª–µ—á–µ–Ω–∏–µ–º."
    )
    await update.message.reply_text(welcome_text, reply_markup=reply_markup)

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–æ–∫
async def button_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()

    if query.data == "bot_chat":
        await query.edit_message_text("–ù–∞–ø–∏—à–∏—Ç–µ –≤–∞—à –≤–æ–ø—Ä–æ—Å –ø–æ —É—Ö–æ–¥—É –∑–∞ –∫–æ–∂–µ–π. –Ø –ø–æ—Å—Ç–∞—Ä–∞—é—Å—å –ø–æ–º–æ—á—å üß¥")
        context.user_data["chat_mode"] = True
    elif query.data == "whatsapp":
        keyboard = [[InlineKeyboardButton("–ü–µ—Ä–µ–π—Ç–∏ –≤ WhatsApp", url=WHATSAPP_LINK)]]
        reply_markup = InlineKeyboardMarkup(keyboard)
        await query.edit_message_text(
            "üë©‚Äç‚öïÔ∏è –ù–∞—à –≤—Ä–∞—á –≥–æ—Ç–æ–≤ –ø—Ä–æ–∫–æ–Ω—Å—É–ª—å—Ç–∏—Ä–æ–≤–∞—Ç—å –≤–∞—Å –ª–∏—á–Ω–æ!\n"
            "–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ –∏ –Ω–∞–ø–∏—à–∏—Ç–µ –≤ WhatsApp:",
            reply_markup=reply_markup
        )
        context.user_data["chat_mode"] = False

# –û—Ç–≤–µ—Ç –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ
async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not context.user_data.get("chat_mode"):
        return

    user_msg = update.message.text
    prompt = (
        "–¢—ã ‚Äî –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–π –∫–æ—Å–º–µ—Ç–æ–ª–æ–≥. –û—Ç–≤–µ—á–∞–π —Ç–æ–ª—å–∫–æ –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã –ø–æ —É—Ö–æ–¥—É –∑–∞ –∫–æ–∂–µ–π. "
        "–ï—Å–ª–∏ –≤–æ–ø—Ä–æ—Å –Ω–µ –ø–æ —Ç–µ–º–µ ‚Äî —Å–∫–∞–∂–∏, —á—Ç–æ —Ç—ã –º–æ–∂–µ—à—å –≥–æ–≤–æ—Ä–∏—Ç—å —Ç–æ–ª—å–∫–æ –æ –∫–æ—Å–º–µ—Ç–æ–ª–æ–≥–∏–∏.\n"
        f"–í–æ–ø—Ä–æ—Å: {user_msg}"
    )

    try:
        response = client.chat.completions.create(
            model="gpt-4-1106-preview",
            messages=[{"role": "user", "content": prompt}],
            max_tokens=300,
            temperature=0.7,
        )
        reply = response.choices[0].message.content.strip()
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ GPT: {e}")
        reply = "–£–ø—Å, —á—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."

    await update.message.reply_text(reply)

# –ö–æ–º–∞–Ω–¥–∞ /done
async def done(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("–°–ø–∞—Å–∏–±–æ, —á—Ç–æ –æ–±—Ä–∞—Ç–∏–ª–∏—Å—å! –ë—É–¥—å—Ç–µ –∫—Ä–∞—Å–∏–≤—ã –∏ –∑–¥–æ—Ä–æ–≤—ã üíñ")

# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
def main():
    app = ApplicationBuilder().token(BOT_TOKEN).build()

    app.add_handler(CommandHandler("start", start))
    app.add_handler(CommandHandler("done", done))
    app.add_handler(CallbackQueryHandler(button_handler))
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message))

    app.run_polling()

if __name__ == "__main__":
    main()
